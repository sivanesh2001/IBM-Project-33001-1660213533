# -*- coding: utf-8 -*-
"""Assignment_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j4DhwanrPZN6PtxzXA1cFneu7QdqSETf
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
sns.set_style('darkgrid')
sns.set(font_scale=1.3)



from google.colab import drive
drive.mount('/content/drive')

df=pd.read_csv("/content/drive/MyDrive/IBM ASSIGNMENTS/Churn_Modelling.csv")

df.head()

df.drop(["RowNumber","CustomerId","Surname"],axis=1,inplace=True)

df.info()

#Perform Univariate Analysis
plt.figure(figsize=(8,8))
sns.countplot(x='Tenure',data=df)
plt.xlabel('0:Customers with Bank, 1: exited from bank')
plt.ylabel('No.of.Customers')
plt.title("Bank Customers viz")
plt.show()

#Perform Univariate Analysis
plt.figure(figsize=(8,8))
sns.kdeplot(x=df['Balance'])

#Perform Bivariate Analysis 
plt.scatter(df.Age,df.Balance)

#Perform Bivariate Analysis
df.corr()

#Perform Bivariate Analysis
import statsmodels.api as sm

#define response variable
y = df['CreditScore']

#define explanatory variable
x = df[['EstimatedSalary']]

#add constant to predictor variables
x = sm.add_constant(x)

#fit linear regression model
model = sm.OLS(y, x).fit()

#view model summary
print(model.summary())

#Perform Multivariate Analysis
plt.figure(figsize=(4,4))
sns.pairplot(data=df[["Balance","CreditScore","EstimatedSalary","NumOfProducts","Tenure","Exited"]],hue="Exited")

#Perform Descriptive Statistics
df=pd.DataFrame(df)
print(df.sum())

#Perform Descriptive Statistics
print("----Sum Value-----")
print(df.sum(1))
print("----------------------------------")
print("-----Product Value-----")
print(df.prod())
print("----------------------------------")

#Perform Descriptive Statistics
print("----------Mean Value-----------")
print(df.mean())
print("-------------------------------")
print("----------Median Value---------")
print(df.median())
print("-------------------------------")
print("----------Mode Value------------")
print(df.mode())
print("-------------------------------")

#Handling with missing Values
df.isnull()#Checking values are null

#Handling with missing Values
df.notnull()#Checking values are not null

#Find outliers & replace the outliers
sns.boxplot(df['Balance'])

#Find outliers & replace the outliers
print(np.where(df['Balance']>100000))

#Find outliers & replace the outliers
from scipy import stats
import numpy as np
 
z = np.abs(stats.zscore(df["EstimatedSalary"]))
print(z)

#Check for categorical columns & performs encoding
from sklearn.preprocessing import LabelEncoder
df['Gender'].unique()

#Check for categorical columns & performs encoding
df['Gender'].value_counts()

#Check for categorical columns & performs encoding
encoding=LabelEncoder()
df["Gender"]=encoding.fit_transform(df.iloc[:,1].values)
df

#Check for categorical columns & performs encoding

#Split the data into Dependent & Independent Variables
print("----------Dependent Variables----------")
X=df.iloc[:,1:4]
print(X)
print("---------------------------------------")
print("---------Independent Variables---------")
Y=df.iloc[:,4]
print(Y)
print("---------------------------------------")

#Scale the independent Variables
from sklearn.preprocessing import StandardScaler
object= StandardScaler()
# standardization 
scale = object.fit_transform(df) 
print(scale)

#Split the data into training & testing
from sklearn.model_selection import train_test_split

#Split the data into training & testing
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=4,random_state=4)
x_train

#Split the data into training & testing
x_test

#Split the data into training & testing
y_train

#Split the data into training & testing
y_test